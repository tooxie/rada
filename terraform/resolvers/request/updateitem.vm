## https://docs.aws.amazon.com/appsync/latest/devguide/tutorial-dynamodb-resolvers.html#modifying-the-updatepost-resolver-dynamodb-updateitem

## ############################################## ##
## FIXME: Update slug as well if the name changes ##
## ############################################## ##
{
    "version": "2017-02-28",
    "operation": "UpdateItem",
    "key": {
        "adjacentId": $util.dynamodb.toDynamoDBJson("${entity}:"),
        "id": $util.dynamodb.toDynamoDBJson($context.arguments.id)
    },

    ## Set up some space to keep track of things you're updating **
    #set( $expressionNames  = {} )
    #set( $expressionValues = {} )
    #set( $expSet = {} )
    #set( $expAdd = {} )
    #set( $expRemove = [] )

    ## Iterate through each argument, skipping "id" **
    #foreach( $entry in $context.arguments.input.entrySet() )
        #if( $entry.key != "id" )
            #if( (!$entry.value) && ("$!{entry.value}" == "") )
                ## If the argument is set to "null", then remove that attribute from the item in DynamoDB **

                #set( $discard = $${expRemove.add("#$${entry.key}")} )
                $!{expressionNames.put("#$${entry.key}", "$entry.key")}
            #else
                ## Otherwise set (or update) the attribute on the item in DynamoDB **

                $!{expSet.put("#$${entry.key}", ":$${entry.key}")}
                $!{expressionNames.put("#$${entry.key}", "$entry.key")}
                $!{expressionValues.put(":$${entry.key}", $util.dynamodb.toDynamoDB($entry.value))}
            #end
        #end
    #end

    ## Start building the update expression, starting with attributes you're going to SET **
    #set( $expression = "" )
    #if( !$${expSet.isEmpty()} )
        #set( $expression = "SET" )
        #foreach( $entry in $expSet.entrySet() )
            #set( $expression = "$${expression} $${entry.key} = $${entry.value}" )
            #if ( $foreach.hasNext )
                #set( $expression = "$${expression}," )
            #end
        #end
    #end

    ## Continue building the update expression, adding attributes you're going to ADD **
    #if( !$${expAdd.isEmpty()} )
        #set( $expression = "$${expression} ADD" )
        #foreach( $entry in $expAdd.entrySet() )
            #set( $expression = "$${expression} $${entry.key} $${entry.value}" )
            #if ( $foreach.hasNext )
                #set( $expression = "$${expression}," )
            #end
        #end
    #end

    ## Continue building the update expression, adding attributes you're going to REMOVE **
    #if( !$${expRemove.isEmpty()} )
        #set( $expression = "$${expression} REMOVE" )

        #foreach( $entry in $expRemove )
            #set( $expression = "$${expression} $${entry}" )
            #if ( $foreach.hasNext )
                #set( $expression = "$${expression}," )
            #end
        #end
    #end

    ## Finally, write the update expression into the document, along with any expressionNames and expressionValues **
    "update": {
        "expression": "$${expression}"
        #if( !$${expressionNames.isEmpty()} )
            ,"expressionNames": $utils.toJson($expressionNames)
        #end
        #if( !$${expressionValues.isEmpty()} )
            ,"expressionValues": $utils.toJson($expressionValues)
        #end
    }
}
