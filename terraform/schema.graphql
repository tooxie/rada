type Mutation {
  createArtist(input: CreateArtistInput!): Artist
  updateArtist(id: ID!, input: UpdateArtistInput!): Artist
  deleteArtist(id: ID!): Artist
  deleteCascadeArtist(id: ID!): Artist

  createAlbum(input: CreateAlbumInput!): Album
  updateAlbum(id: ID!, input: UpdateAlbumInput!): Album
  deleteAlbum(id: ID!): Album
  deleteCascadeAlbum(id: ID!): Album

  createTrack(input: CreateTrackInput!): Track
  updateTrack(id: ID!, input: UpdateTrackInput!): Track
  deleteTrack(id: ID!): Track

  registerServer(input: CreateServerInput): Server
    @aws_auth(cognito_groups: ["${COGNITO_ADMIN_GROUP_NAME}"])

  createInvite(input: CreateInviteInput!): InviteUrl
    @aws_auth(cognito_groups: ["${COGNITO_ADMIN_GROUP_NAME}"])
  revokeInvite(id: ID!): Boolean
    @aws_auth(cognito_groups: ["${COGNITO_ADMIN_GROUP_NAME}"])
  markInviteUnsolicited(id: ID!): Boolean
    @aws_auth(cognito_groups: ["${COGNITO_ADMIN_GROUP_NAME}"])
}

type Query {
  getAlbum(id: ID!): Album
  listAlbums(filter: TableAlbumFilterInput): AlbumConnection

  getArtist(id: ID!): Artist
  listArtists(filter: TableArtistFilterInput): ArtistConnection
  listArtistsForAlbum(id: ID!): [Artist!]

  getTrack(albumId: ID!, id: ID!): Track
  listOrphanTracks: TrackConnection

  listServers: ServerConnection
    @aws_auth(cognito_groups: ["${COGNITO_ADMIN_GROUP_NAME}"])

  getInvite(id: ID!): Invite
    @aws_auth(cognito_groups: ["${COGNITO_ADMIN_GROUP_NAME}"])
  listInvites(filter: TableInviteFilterInput): InviteConnection
    @aws_auth(cognito_groups: ["${COGNITO_ADMIN_GROUP_NAME}"])
}

type Subscription {
  onCreateArtist(id: ID, name: String): Artist
    @aws_subscribe(mutations: ["createArtist"])
  onUpdateArtist(id: ID, name: String): Artist
    @aws_subscribe(mutations: ["updateArtist"])
  onDeleteArtist(id: ID, name: String): Artist
    @aws_subscribe(mutations: ["deleteArtist"])

  onCreateAlbum(id: ID, name: String): Album
    @aws_subscribe(mutations: ["createAlbum"])
  onUpdateAlbum(id: ID, name: String): Album
    @aws_subscribe(mutations: ["updateAlbum"])
  onDeleteAlbum(id: ID, name: String): Album
    @aws_subscribe(mutations: ["deleteAlbum"])

  onCreateTrack(id: ID, title: String): Track
    @aws_subscribe(mutations: ["createTrack"])
  onUpdateTrack(id: ID, title: String): Track
    @aws_subscribe(mutations: ["updateTrack"])
  onDeleteTrack(id: ID, title: String): Track
    @aws_subscribe(mutations: ["deleteTrack"])
}

input TableBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input TableFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input TableIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input TableIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input TableStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

# --- Artist
input TableArtistFilterInput {
  name: TableStringFilterInput
}

type Artist {
  serverId: ID!
  id: ID!
  name: String
  imageUrl: AWSURL
  albums: [Album!]
}

type ArtistConnection {
  items: [Artist!]
}

input CreateArtistInput {
  name: String!
  imageUrl: AWSURL
  albums: [CreateAlbumInput]
}

input UpdateArtistInput {
  name: String
  imageUrl: AWSURL
}

# --- Album
input TableAlbumFilterInput {
  name: TableStringFilterInput
}

type Album {
  serverId: ID!
  id: ID!
  artists: [Artist!]
  name: String
  imageUrl: AWSURL
  year: Int
  tracks: [Track!]
  isVa: Boolean
}

type AlbumConnection {
  items: [Album!]
}

input CreateAlbumInput {
  artists: [ID!]
  name: String!
  imageUrl: AWSURL
  year: Int
}

input UpdateAlbumInput {
  name: String
  imageUrl: AWSURL
  year: Int
}

# --- Track
input TableTrackFilterInput {
  albumId: TableStringFilterInput
}

type Track {
  serverId: ID!
  id: ID!
  album: Album
  artists: [Artist!]
  url: AWSURL!
  title: String
  info: String
  lengthInSeconds: Int
  ordinal: Int
  hash: String!
  features: [String!]
}

type TrackConnection {
  items: [Track!]
}

input CreateTrackInput {
  albumId: ID!
  url: AWSURL!
  title: String
  lengthInSeconds: Int
  ordinal: Int
  artists: [ID!]
  hash: String!
}

input UpdateTrackInput {
  albumId: ID
  title: String
  url: AWSURL
  lengthInSeconds: Int
  ordinal: Int
  artists: [ID!]
  hash: String!
}

# --- Invite
input TableInviteFilterInput {
  id: TableIDFilterInput
  timestamp: TableStringFilterInput
  note: TableStringFilterInput
  visited: TableIntFilterInput
  installed: TableIntFilterInput
  unsolicited: TableIntFilterInput
}

type Invite {
  id: ID!
  timestamp: Int!
  note: String
  validity: Int
  visited: Int
  installed: Int
  unsolicited: Int
}

type InviteUrl {
  claimUrl: String!
}

type InviteConnection {
  items: [Invite!]
}

input CreateInviteInput {
  note: String
  validity: Int
  isAdmin: Boolean
}

# --- Server
type Server {
  id: ID!
  name: String!
  note: String
  apiUrl: String
  headerUrl: String
  timestamp: Int!
  banned: Boolean
  handshakeCompleted: Boolean
}

type ServerConnection {
  items: [Server!]
}

input CreateServerInput {
  id: ID!
  name: String!
  note: String
  apiUrl: String!
  idpUrl: String!
  headerUrl: String
}
